from flask import Flask, request, jsonify
from flask_cors import CORS
import os
import requests
import cv2

# Initialize Flask app
app = Flask(__name__)
CORS(app)  # Enable CORS

# Configuration
AI_IMAGE_API_URL = "https://example-ai-api.com/generate-image"  # Placeholder AI API URL
UPLOAD_FOLDER = "uploads"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

@app.route("/generate-image", methods=["POST"])
def generate_image():
    """Generate an image from a text prompt."""
    try:
        data = request.get_json()
        prompt = data.get("prompt", "")
        if not prompt:
            return jsonify({"error": "No prompt provided"}), 400
        response = requests.post(AI_IMAGE_API_URL, json={"prompt": prompt})
        if response.status_code == 200:
            result = response.json()
            return jsonify({"imageUrl": result.get("imageUrl", "")})
        return jsonify({"error": "AI Image API Failed", "details": response.text}), 500
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/process-media", methods=["POST"])
def process_media():
    """Process uploaded images or videos."""
    try:
        if "file" not in request.files:
            return jsonify({"error": "No file provided"}), 400
        file = request.files["file"]
        filename = os.path.join(UPLOAD_FOLDER, file.filename)
        file.save(filename)
        file_ext = os.path.splitext(filename)[-1].lower()
        if file_ext in [".png", ".jpg", ".jpeg"]:
            return process_image(filename)
        elif file_ext in [".mp4", ".avi", ".mov"]:
            return process_video(filename)
        return jsonify({"error": "Unsupported file type"}), 400
    except Exception as e:
        return jsonify({"error": str(e)}), 500

def process_image(filepath):
    """Process image: Return dimensions."""
    image = cv2.imread(filepath)
    height, width, _ = image.shape
    return jsonify({"message": "Image processed successfully", "dimensions": f"{width}x{height}"})

def process_video(filepath):
    """Process video: Count frames."""
    cap = cv2.VideoCapture(filepath)
    if not cap.isOpened():
        return jsonify({"error": "Failed to open video file"}), 500
    frame_count = 0
    while cap.isOpened():
        ret, _ = cap.read()
        if not ret:
            break
        frame_count += 1
    cap.release()
    return jsonify({"message": "Video processed successfully", "total_frames": frame_count})

if __name__ == "__main__":
    app.run(debug=True, port=5000)
